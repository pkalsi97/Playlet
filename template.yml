# Do Not Touch This unless you know what you are doing! Unverified aActions can lead to Deployment Failure or Deletion of Resources 
AWSTemplateFormatVersion: 2010-09-09
Description: A Serverless & Loosely Coupled Video Transcoding & Delivery Project
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    PermissionsBoundary: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary
    Environment:
      Variables:
        USER_POOL_ID: !Ref UserPool
        CLIENT_ID: !Ref UserPoolClient
        UPLOAD_SIZE_LIMIT: !Ref UploadSizeLimit
        UPLOAD_TIME_LIMIT: !Ref UploadTimeLimit
    LoggingConfig:
      ApplicationLogLevel: WARN
      LogFormat: JSON
      LogGroup: !Ref BackendLogGroup
      SystemLogLevel: WARN
    Tags:
      Application: !Sub ${AppId}
      Environment: Production
  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: true
    Cors:
      AllowOrigin: '''*'''
      AllowHeaders: '''Content-Type, Authorization, X-Access-Token'''
      AllowMethods: '''POST'''
      MaxAge: 5
    MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        LoggingLevel: ERROR
        DataTraceEnabled: true
    Auth:
      Authorizers:
        Cognito-playlet:
          UserPoolArn: !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
          IdentitySource: $request.header.Authorization
          JwtConfiguration:
            Audience:
              - !Ref UserPoolClient
            Issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}

Parameters:
  AppId:
    Type: String
    Description: Playlet Project
  UploadSizeLimit:
    Type: Number
    Description: Upload Size Limit for content-length-range
  UploadTimeLimit:
    Type: Number
    Description: Upload Time Limit for preSignedPost
  TransportExpiryDays:
    Type: Number
    Description: File Expiry Days for Transport

Resources:
  # Common Logging Group for all lambda
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${AppId}-Backend-PreprocessingHandler-Logs
  # User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AppId}-userpool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      DeletionProtection: ACTIVE
      MfaConfiguration: 'OFF'
      UsernameConfiguration:
        CaseSensitive: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: email
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
  # User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AppId}-client
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 365
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
  # Auth Handler Lambda Function
  AuthHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Authentication & Authorization
      CodeUri: ./
      Handler: dist/handlers/auth-handler.authHandler
      Runtime: nodejs18.x
      MemorySize: 1024
      Timeout: 60
      Tracing: Active
      Architectures:
        - arm64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonCognitoPowerUser
        - AWSXrayWriteOnlyAccess
      Events:
        AuthAPIsPOSTv1authsignup:
          Type: Api
          Properties:
            Path: /v1/auth/signup
            Method: POST
            RestApiId: !Ref AuthAPIs
        AuthAPIsPOSTv1authlogin:
          Type: Api
          Properties:
            Path: /v1/auth/login
            Method: POST
            RestApiId: !Ref AuthAPIs
        AuthAPIsPOSTv1authlogout:
          Type: Api
          Properties:
            Path: /v1/auth/logout
            Method: POST
            RestApiId: !Ref AuthAPIs
        AuthAPIsPOSTv1authforgetpassword:
          Type: Api
          Properties:
            Path: /v1/auth/forget-password
            Method: POST
            RestApiId: !Ref AuthAPIs
        AuthAPIsPOSTv1authforgetpasswordconfirm:
          Type: Api
          Properties:
            Path: /v1/auth/forget-password/confirm
            Method: POST
            RestApiId: !Ref AuthAPIs
        AuthAPIsPOSTv1authsessionrefresh:
          Type: Api
          Properties:
            Path: /v1/auth/session/refresh
            Method: POST
            RestApiId: !Ref AuthAPIs
      Environment:
        Variables:
          CLIENT_ID: !Ref UserPoolClient
  # Upload Handler Lambda Function
  UploadHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Upload Management
      CodeUri: ./
      Handler: dist/handlers/upload-handler.uploadHandler
      Runtime: nodejs18.x
      MemorySize: 1024
      Timeout: 60
      Tracing: Active
      Architectures:
        - arm64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${TransportStorage}
                - !Sub arn:${AWS::Partition}:s3:::${TransportStorage}/*
      Events:
        UserActionsAPIsPOSTv1useruploadrequest:
          Type: Api
          Properties:
            Path: /v1/user/upload-request
            Method: POST
            RestApiId: !Ref UserActionsAPIs
      Environment:
        Variables:
          TRANSPORTSTORAGE_BUCKET_NAME: !Ref TransportStorage
          TRANSPORTSTORAGE_BUCKET_ARN: !GetAtt TransportStorage.Arn
  #AUTH APIs
  AuthAPIs:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: AuthAPIs
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /v1/auth/signup:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthHandler.Arn}/invocations
              responses: {}
          /v1/auth/login:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthHandler.Arn}/invocations
              responses: {}
          /v1/auth/logout:
            post:
              security:
                - Cognito-playlet: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthHandler.Arn}/invocations
              responses: {}
          /v1/auth/forget-password:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthHandler.Arn}/invocations
              responses: {}
          /v1/auth/forget-password/confirm:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthHandler.Arn}/invocations
              responses: {}
          /v1/auth/session/refresh:
            post:
              security:
                - Cognito-playlet: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthHandler.Arn}/invocations
              responses: {}
  # User Actions APIs
  UserActionsAPIs:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: UserActionsAPIs
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /v1/user/upload-request:
            post:
              security:
                - Cognito-playlet: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadHandler.Arn}/invocations
              responses: {}
  #S3 Bucket Used For Uploads & Its Policy
  TransportStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-transport-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: !Ref TransportExpiryDays
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:Post
            Queue: !GetAtt PreprocessingQueue.Arn
    DependsOn:
      - TransportStorageToPreprocessingQueuePermission
  TransportStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TransportStorage
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt TransportStorage.Arn
              - !Sub ${TransportStorage.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  PreprocessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: Preprocessing Queue
      MessageRetentionPeriod: 345600
  TransportStorageToPreprocessingQueuePermission:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt PreprocessingQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub arn:${AWS::Partition}:s3:::${AWS::StackName}-transport-${AWS::AccountId}
      Queues:
        - !Ref PreprocessingQueue
  PreprocessingHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: PreprocessingHandler
      CodeUri: ./
      Handler: dist/handlers/preprocessing-handler.preprocessingHandler
      Runtime: nodejs18.x
      MemorySize: 2500
      Timeout: 60
      Tracing: Active
      Architectures:
        - arm64
      Events:
        PreprocessingQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt PreprocessingQueue.Arn
            BatchSize: 1